import random

# Parâmetros
NUM_AMOSTRAS = 30
NUM_ENTRADAS = 3
TX_APRENDIZAGEM = 0.01
NUM_TREINOS = 5
MAX_EPOCAS = 10000

# Função de ativação (degrau bipolar)
def funcao_ativacao(u):
    """Retorna 1 se u >= -5, senão retorna -1."""
    return 1.0 if u >= -5 else -1.0

# Função para exibir os pesos
def exibir_pesos(pesos):
    """Exibe os pesos atuais do modelo."""
    print("Pesos:", " ".join(str(peso) for peso in pesos))

# Função para validar o modelo
def validar_modelo(pesos, amostras_validacao):
    """Classifica as amostras de validação usando os pesos treinados."""
    print("<< Executando Classificação >>")
    for i, amostra in enumerate(amostras_validacao):
        # Calcula o potencial de ativação
        u = sum(peso * entrada for peso, entrada in zip(pesos[1:], amostra)) - pesos[0]
        
        # Aplica a função de ativação
        y = funcao_ativacao(u)
        print(f"Amostra {i + 1}: Saída = {y}")

# Dados de treinamento e validação
conjunto_treinamento = [
    # ... (dados originais)
]

amostras_validacao = [
    # ... (dados originais)
]

# Treinamento do modelo
for treinamento in range(1, NUM_TREINOS + 1):
    print(f"\nTreinamento {treinamento}:\n")
    
    # Inicializa os pesos aleatoriamente
    pesos = [random.random() for _ in range(NUM_ENTRADAS + 1)]
    
    print("Treinamento iniciado")
    exibir_pesos(pesos)
    epoca = 0

    # Loop de treinamento
    while epoca < MAX_EPOCAS:
        erro = False

        for amostra in conjunto_treinamento:
            # Calcula o potencial de ativação
            u = sum(peso * entrada for peso, entrada in zip(pesos[1:], amostra[:-1])) - pesos[0]
            
            # Aplica a função de ativação
            y = funcao_ativacao(u)

            # Verifica se houve erro na classificação
            if y != amostra[-1]:
                # Ajusta os pesos (incluindo o bias)
                for i in range(NUM_ENTRADAS):
                    pesos[i + 1] += TX_APRENDIZAGEM * (amostra[-1] - y) * amostra[i]
                pesos[0] += TX_APRENDIZAGEM * (amostra[-1] - y)
                erro = True

        epoca += 1

        # Verifica se houve convergência
        if not erro:
            print("Convergência alcançada. Parando o treinamento.\n")
            break

    # Exibe os resultados do treinamento
    print(f"Treinamento concluído em {epoca} épocas.\n")
    exibir_pesos(pesos)

    # Valida o modelo
    validar_modelo(pesos, amostras_validacao)
